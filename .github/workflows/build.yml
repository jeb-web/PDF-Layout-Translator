name: Build PDF Layout Translator (Single EXE)

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: 'PDF-Layout-Translator'

jobs:
  # =====================================================
  # Tests rapides
  # =====================================================
  test:
    name: Quick Tests
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    # ADDED STEPS START HERE
    - name: Get version
      id: version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="1.0.0-dev-$(date +%Y%m%d)"
          if command -v git &> /dev/null; then
            GIT_VERSION=$(git describe --tags --always 2>/dev/null || echo "")
            if [ ! -z "$GIT_VERSION" ]; then
              VERSION=$GIT_VERSION
            fi
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üìã Version: $VERSION"
    
    - name: Create version file
      run: |
        echo "__version__ = '${{ steps.version.outputs.version }}'" > src/__version__.py
    # ADDED STEPS END HERE

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Quick lint check
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true
    
    - name: Basic import test
      run: |
        python -c "import src.main; print('‚úÖ Import successful')"

  # =====================================================
  # Build unique EXE
  # =====================================================
  build-exe:
    name: Build Single EXE
    runs-on: windows-latest
    needs: test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -e .
    
    - name: Get version
      id: version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="1.0.0-dev-$(date +%Y%m%d)"
          if command -v git &> /dev/null; then
            GIT_VERSION=$(git describe --tags --always 2>/dev/null || echo "")
            if [ ! -z "$GIT_VERSION" ]; then
              VERSION=$GIT_VERSION
            fi
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üìã Version: $VERSION"
    
    - name: Create version file
      run: |
        echo "__version__ = '${{ steps.version.outputs.version }}'" > src/__version__.py
    
    - name: Create PyInstaller spec file
      run: |
        echo "üìù Cr√©ation du fichier spec PyInstaller..."
        
        # Cr√©er le contenu du fichier spec (√©chapp√© pour YAML)
        $specContent = @'
        # -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        a = Analysis(
            ['src/main.py'],
            pathex=[],
            binaries=[],
            datas=[
                ('src/assets', 'assets'),
                ('README.md', '.'),
                ('LICENSE', '.'),
            ],
            hiddenimports=[
                'tkinter',
                'tkinter.ttk',
                'tkinter.filedialog',
                'tkinter.messagebox',
                'tkinter.scrolledtext',
                'PIL._tkinter_finder',
                'fitz',
                'reportlab',
                'fontTools',
                'pathlib',
                'json',
                'logging',
                'threading',
                'tempfile',
                'shutil',
                'datetime',
                'dataclasses',
                'enum',
                'typing',
                'regex',
                'chardet',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[
                'matplotlib',
                'numpy',
                'scipy',
                'pandas',
                'jupyter',
                'IPython',
                'pytest',
                'sphinx',
                'setuptools',
                'wheel',
                'pip',
            ],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='PDF-Layout-Translator',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        '@
        
        # √âcrire le fichier spec
        $specContent | Out-File -FilePath "single_exe.spec" -Encoding UTF8
        Write-Host "‚úÖ Fichier spec cr√©√©"
    
    - name: Build single EXE with PyInstaller
      run: |
        echo "üî® Construction de l'ex√©cutable unique..."
        
        # Construire l'EXE
        pyinstaller --clean single_exe.spec
        
        # V√©rifier la cr√©ation
        if (Test-Path "dist\PDF-Layout-Translator.exe") {
          Write-Host "‚úÖ EXE cr√©√© avec succ√®s !"
          $file = Get-Item "dist\PDF-Layout-Translator.exe"
          $sizeInMB = [math]::Round($file.Length / 1MB, 2)
          Write-Host "üìä Taille: $sizeInMB MB"
          Write-Host "üìÖ Date: $($file.LastWriteTime)"
        } else {
          Write-Host "‚ùå √âchec de la cr√©ation de l'EXE"
          Get-ChildItem dist\ -ErrorAction SilentlyContinue
          exit 1
        }
    
    - name: Test EXE launch
      run: |
        echo "üß™ Test de lancement..."
        if (Test-Path "dist\PDF-Layout-Translator.exe") {
          Write-Host "‚úÖ EXE trouv√© et valide"
          # Test basique de la taille (doit √™tre > 10MB pour √™tre valide)
          $file = Get-Item "dist\PDF-Layout-Translator.exe"
          if ($file.Length -gt 10MB) {
            Write-Host "‚úÖ Taille EXE normale ($([math]::Round($file.Length / 1MB, 2)) MB)"
          } else {
            Write-Host "‚ö†Ô∏è EXE possiblement incomplet (taille: $([math]::Round($file.Length / 1MB, 2)) MB)"
          }
        }
      continue-on-error: true
    
    - name: Rename with version
      run: |
        # Renommer avec la version pour clart√©
        $oldName = "dist\PDF-Layout-Translator.exe"
        $newName = "dist\PDF-Layout-Translator-${{ steps.version.outputs.version }}.exe"
        
        if (Test-Path $oldName) {
          Move-Item $oldName $newName
          Write-Host "üìù Renomm√© en: PDF-Layout-Translator-${{ steps.version.outputs.version }}.exe"
        }
    
    - name: Generate checksum
      run: |
        cd dist
        $exeFile = Get-ChildItem "PDF-Layout-Translator-*.exe"
        if ($exeFile) {
          $hash = Get-FileHash $exeFile.Name -Algorithm SHA256
          "$($hash.Hash.ToLower())  $($exeFile.Name)" | Out-File -FilePath "checksum.txt" -Encoding ASCII
          Write-Host "üîê Checksum g√©n√©r√©:"
          Get-Content "checksum.txt"
        }
    
    - name: Upload EXE artifact
      uses: actions/upload-artifact@v3
      with:
        name: pdf-layout-translator-exe
        path: |
          dist/PDF-Layout-Translator-*.exe
          dist/checksum.txt
        retention-days: 30
    
    # Passer la version aux jobs suivants
    outputs:
      version: ${{ steps.version.outputs.version }}

  # =====================================================
  # Release (si tag ou manuel)
  # =====================================================
  create-release:
    name: Create Release
    runs-on: windows-latest
    needs: [build-exe]
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download EXE
      uses: actions/download-artifact@v3
      with:
        name: pdf-layout-translator-exe
        path: release-assets/
    
    - name: Generate release notes
      run: |
        $version = "${{ needs.build-exe.outputs.version }}"
        
        $releaseNotes = @'
        # üöÄ PDF Layout Translator v{0}
        
        ## üì± Application Windows - Un seul fichier EXE !
        
        **Nouveau :** Application compl√®te dans un seul ex√©cutable - aucune installation requise !
        
        ### üì¶ T√©l√©chargement
        - **PDF-Layout-Translator-{0}.exe** (~ 50-80 MB)
          - ‚úÖ **Pr√™t √† l'emploi** - Double-cliquez et c'est parti !
          - ‚úÖ **Portable** - Fonctionne depuis n'importe o√π (cl√© USB, dossier, etc.)
          - ‚úÖ **Aucune installation** - Pas d'admin requis
          - ‚úÖ **Auto-contenu** - Toutes les d√©pendances incluses
        
        ### üöÄ Utilisation ultra-simple
        1. **T√©l√©chargez** le fichier .exe
        2. **Double-cliquez** dessus
        3. **C'est tout !** L'application se lance directement
        
        ### ‚ú® Fonctionnalit√©s
        - üîç **Analyse automatique** de la structure PDF
        - üåê **Interface avec IA** (ChatGPT, Claude, Gemini...)
        - üìê **Pr√©servation parfaite** de la mise en page
        - üîß **Gestion intelligente** des polices
        - üì§ **Export professionnel** du PDF traduit
        - üëÄ **Pr√©visualisation** avec comparaison avant/apr√®s
        
        ### üîí S√©curit√©
        - **Checksum SHA256** : V√©rifiez l'int√©grit√© avec `checksum.txt`
        - **Code source ouvert** : Consultable sur GitHub
        - **Pas de t√©l√©m√©trie** : Vos donn√©es restent locales
        
        ### üíª Pr√©requis
        - **Windows 10/11** (64-bit)
        - **4 GB RAM** minimum
        - **200 MB espace libre** pour les fichiers temporaires
        
        ### üÜò Support
        - üêõ **Bugs** : [GitHub Issues](https://github.com/loreal/pdf-layout-translator/issues)
        - üìö **Documentation** : [README](https://github.com/loreal/pdf-layout-translator)
        - üí¨ **Questions** : [Discussions GitHub](https://github.com/loreal/pdf-layout-translator/discussions)
        
        ### üîÑ Mise √† jour
        Simplement t√©l√©charger la nouvelle version et remplacer l'ancien fichier !
        
        ---
        üí° **Conseil** : Ajoutez l'EXE √† vos favoris Windows pour un acc√®s rapide !
        '@ -f $version
        
        $releaseNotes | Out-File -FilePath "RELEASE_NOTES.md" -Encoding UTF8
        echo "notes_file=RELEASE_NOTES.md" >> $env:GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref || format('v{0}', needs.build-exe.outputs.version) }}
        name: "PDF Layout Translator v${{ needs.build-exe.outputs.version }}"
        body_path: RELEASE_NOTES.md
        files: |
          release-assets/PDF-Layout-Translator-*.exe
          release-assets/checksum.txt
        draft: false
        prerelease: ${{ contains(needs.build-exe.outputs.version, 'dev') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =====================================================
  # Notification de succ√®s
  # =====================================================
  notify-success:
    name: Success Notification
    runs-on: windows-latest
    needs: [build-exe]
    if: success()
    
    steps:
    - name: Success message
      run: |
        Write-Host "üéâ Build r√©ussi !"
        Write-Host "üì¶ EXE disponible dans les artifacts"
        Write-Host "‚¨áÔ∏è  T√©l√©chargez depuis la page Actions ou Releases"
        Write-Host "üöÄ Version: ${{ needs.build-exe.outputs.version }}"
